#ifndef __INC_METIN_II_LENGTH_H__
#define __INC_METIN_II_LENGTH_H__
#include "Controls.h"
#define WORD_MAX 0xffff

enum EMisc
{
	MAX_HOST_LENGTH			= 15,
	IP_ADDRESS_LENGTH		= 15,
	LOGIN_MAX_LEN			= 30,
	PASSWD_MAX_LEN			= 16,
#ifdef ENABLE_PLAYER_PER_ACCOUNT5
	PLAYER_PER_ACCOUNT		= 5,
#else
	PLAYER_PER_ACCOUNT		= 4,
#endif
	ACCOUNT_STATUS_MAX_LEN	= 8,
	CHARACTER_NAME_MAX_LEN	= 64,//@Lightwork131
	SHOP_SIGN_MAX_LEN		= 32,
	INVENTORY_PAGE_COLUMN	= 5, // 5 (default)
	INVENTORY_PAGE_ROW		= 9, // 9 (default)
	INVENTORY_PAGE_SIZE		= INVENTORY_PAGE_COLUMN*INVENTORY_PAGE_ROW,
#ifdef ENABLE_EXTEND_INVEN_SYSTEM
	INVENTORY_PAGE_COUNT	= 5, // 2 (default)
#else
	INVENTORY_PAGE_COUNT	= 2, // 2 (default)
#endif
	INVENTORY_MAX_NUM		= INVENTORY_PAGE_SIZE*INVENTORY_PAGE_COUNT, // 90 (default)
	ABILITY_MAX_NUM			= 50,
	EMPIRE_MAX_NUM			= 4,
	BANWORD_MAX_LEN			= 24,
	SOCIAL_ID_MAX_LEN		= 18,
	GUILD_NAME_MAX_LEN		= 12,
#ifdef ENABLE_EXTENDED_SHOP_SLOTS
	SHOP_HOST_ITEM_MAX_NUM = 64,
#else
	SHOP_HOST_ITEM_MAX_NUM = 40,
#endif
	SHOP_GUEST_ITEM_MAX_NUM = 18,
#ifdef ENABLE_EXTENDED_SHOP_SLOTS
	SHOP_PRICELIST_MAX_NUM = 64,
#else
	SHOP_PRICELIST_MAX_NUM = 40,
#endif
	CHAT_MAX_LEN			= 512,
	QUICKSLOT_MAX_NUM		= 36,
	JOURNAL_MAX_NUM			= 2,
	QUERY_MAX_LEN			= 8192,
	FILE_MAX_LEN			= 128,
	PLAYER_EXP_TABLE_MAX	= 120,
	PLAYER_MAX_LEVEL_CONST	= 250,
	GUILD_MAX_LEVEL			= 20,
	MOB_MAX_LEVEL			= 100,
	ATTRIBUTE_MAX_VALUE		= 20,
	CHARACTER_PATH_MAX_NUM	= 64,
	SKILL_MAX_NUM			= 255,
	SKILLBOOK_DELAY_MIN		= 64800,
	SKILLBOOK_DELAY_MAX		= 108000,
#ifdef ENABLE_SKILLS_LEVEL_OVER_P
	SKILL_MAX_LEVEL = 60,
#else
	SKILL_MAX_LEVEL = 40,
#endif
	APPLY_NAME_MAX_LEN		= 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,
	MOB_SKILL_MAX_NUM		= 5,
	POINT_MAX_NUM = 255,
	DRAGON_SOUL_BOX_SIZE = 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_BOX_ROW_NUM = DRAGON_SOUL_BOX_SIZE / DRAGON_SOUL_BOX_COLUMN_NUM,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,
	MAX_AMOUNT_OF_MALL_BONUS	= 20,
	WEAR_MAX_NUM				= 64,
#ifdef ENABLE_EXTENDED_YANG_LIMIT
	GOLD_MAX = 1000000000000000LL,
#else
	GOLD_MAX = 2000000000,
#endif
	SHOP_TAB_NAME_MAX = 32,
	SHOP_TAB_COUNT_MAX = 3,
	BELT_INVENTORY_SLOT_WIDTH = 4,
	BELT_INVENTORY_SLOT_HEIGHT= 4,
	BELT_INVENTORY_SLOT_COUNT = BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,
#ifdef ENABLE_SPECIAL_STORAGE
	SPECIAL_INVENTORY_PAGE_COUNT = 5,
	SPECIAL_INVENTORY_PAGE_SIZE = 45,
	SPECIAL_INVENTORY_MAX_NUM = SPECIAL_INVENTORY_PAGE_SIZE * SPECIAL_INVENTORY_PAGE_COUNT,
#endif
#ifdef ENABLE_OFFLINE_SHOP
	OFFLINE_SHOP_NAME_MAX_LEN		= 40 + CHARACTER_NAME_MAX_LEN +1,
	OFFLINESHOP_DURATION_MAX_MINUTES= 4*24* 60,
	OFFLINESHOP_MAX_SEARCH_RESULT	= 250,
#ifdef ENABLE_PREMIUM_MEMBER_SYSTEM
	OFFLINESHOP_DURATION_MAX_MINUTES_PREMIUM = 7*24* 60, // 7 days
	OFFLINE_SHOP_CREATE_GOLD		= 500000,
	OFFLINE_SHOP_EXTEND_TIME_GOLD		= 1000000,
#endif
#ifdef ENABLE_DIZCIYA_GOTTEN
	OFFLINESHOP_SECONDS_PER_SEARCH	= 0,
#else
	OFFLINESHOP_SECONDS_PER_SEARCH	= 5,
#endif
	OFFLINE_SHOP_ITEM_MAX_LEN 		= 24,
#endif
#ifdef ENABLE_BUY_WITH_ITEMS
	MAX_SHOP_PRICES = 5, // Maksimum 5 item karsiliginda bir item satilabilir
#endif
};

#ifdef ENABLE_SWITCHBOT
enum SwitchbotValues
{
	SWITCHBOT_SLOT_COUNT = 5,
	SWITCHBOT_ALTERNATIVE_COUNT = 2,
	SWITCHBOT_PRICE_TYPE = 1, //1 = Switching Item //2 = Yang
	SWITCHBOT_PRICE_AMOUNT = 1, //Amount Swtichting Items the Yang-Price
};

const uint32_t c_arSwitchingItems[2] =
{
#ifdef ENABLE_GREEN_ATTRIBUTE_CHANGER
	71151,
#endif
	71084
};
#endif


#ifdef ENABLE_BUFFI_SYSTEM
enum EBuffiWindow
{
	BUFFI_WEAPON_SLOT,
	BUFFI_BODY_SLOT,
	BUFFI_HAIR_SLOT,
	BUFFI_ACCE_SLOT,
	BUFFI_AURA_SLOT,
	BUFFI_MAX_SLOT
};
#endif

enum EWearPositions
{
	WEAR_BODY			 = 0,
	WEAR_HEAD			 = 1,
	WEAR_FOOTS			 = 2,
	WEAR_WRIST			 = 3,
	WEAR_WEAPON			 = 4,
	WEAR_NECK			 = 5,
	WEAR_EAR			 = 6,
	WEAR_UNIQUE1		 = 7,
	WEAR_UNIQUE2		 = 8,
	WEAR_ARROW			 = 9,
	WEAR_SHIELD			 = 10,
	WEAR_COSTUME_BODY	 = 11,
	WEAR_COSTUME_HAIR	 = 12,

#ifdef ENABLE_MOUNT_COSTUME_SYSTEM 
	WEAR_COSTUME_MOUNT	 = 13,
#endif

#ifdef ENABLE_ACCE_COSTUME_SYSTEM
	WEAR_COSTUME_ACCE	 = 14,
#endif
	WEAR_BELT			 = 15,
#ifdef ENABLE_WEAPON_COSTUME_SYSTEM
	WEAR_COSTUME_WEAPON	 = 16,
#endif
#ifdef ENABLE_PET_COSTUME_SYSTEM
	WEAR_PET			 = 17,
#endif
#ifdef ENABLE_AURA_SYSTEM
	WEAR_COSTUME_AURA	 = 18,
#endif
#ifdef ENABLE_ACCE_COSTUME_SKIN
	WEAR_COSTUME_WING	 = 19,
#endif
#ifdef ENABLE_MOUNT_SKIN
	WEAR_MOUNT_SKIN		 = 20,
#endif
#ifdef ENABLE_PET_SKIN
	WEAR_PET_SKIN		 = 21,
#endif
#ifdef ENABLE_CROWN_SYSTEM
	WEAR_CROWN			 = 22,
#endif
#ifdef ENABLE_ITEMS_SHINING
	WEAR_SHINING_WRIST_LEFT	= 23,
	WEAR_SHINING_WRIST_RIGHT= 24,
	WEAR_SHINING_ARMOR		= 25,
#endif
#ifdef ENABLE_BOOSTER_ITEM
	WEAR_BOOSTER_WEAPON		= 26,
	WEAR_BOOSTER_BODY		= 27,
	WEAR_BOOSTER_HEAD		= 28,
	WEAR_BOOSTER_SASH		= 29,
	WEAR_BOOSTER_PET		= 30,
	WEAR_BOOSTER_MOUNT		= 31,
#endif
#ifdef ENABLE_PENDANT_ITEM
	WEAR_PENDANT			= 32,
#endif
#ifdef ENABLE_GLOVE_ITEM
	WEAR_GLOVE				= 33,
#endif
#ifdef ENABLE_RINGS
	WEAR_RING_0				= 34,
	WEAR_RING_1				= 35,
	WEAR_RING_2				= 36,
	WEAR_RING_3				= 37,
	WEAR_RING_4				= 38,
	WEAR_RING_5				= 39,
	WEAR_RING_6				= 40,
	WEAR_RING_7				= 41,
#endif
#ifdef ENABLE_AURA_SKIN
	WEAR_AURA_SKIN			= 42,
#endif
#ifdef ENABLE_DREAMSOUL
	WEAR_DREAMSOUL_RED		= 43,
	WEAR_DREAMSOUL_BLUE		= 44,
#endif
#ifdef ENABLE_NEW_PET_SYSTEM
	WEAR_NEW_PET			= 45,
#endif
	WEAR_MAX = 64,
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0,
	DRAGON_SOUL_DECK_1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,
	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE
};

enum EDirection
{
	DIR_NORTH,
	DIR_NORTHEAST,
	DIR_EAST,
	DIR_SOUTHEAST,
	DIR_SOUTH,
	DIR_SOUTHWEST,
	DIR_WEST,
	DIR_NORTHWEST,
	DIR_MAX_NUM
};

#define ABILITY_MAX_LEVEL	10

enum EAbilityDifficulty
{
	DIFFICULTY_EASY,
	DIFFICULTY_NORMAL,
	DIFFICULTY_HARD,
	DIFFICULTY_VERY_HARD,
	DIFFICULTY_NUM_TYPES
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL,
	CATEGORY_MENTAL,
	CATEGORY_ATTRIBUTE,
	CATEGORY_NUM_TYPES
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
#ifdef ENABLE_WOLFMAN_CHARACTER
	JOB_WOLFMAN,
#endif
	JOB_MAX_NUM
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL	= (1 << 0),
	RACE_FLAG_UNDEAD	= (1 << 1),
	RACE_FLAG_DEVIL		= (1 << 2),
	RACE_FLAG_HUMAN		= (1 << 3),
	RACE_FLAG_ORC		= (1 << 4),
	RACE_FLAG_MILGYO	= (1 << 5),
	RACE_FLAG_INSECT	= (1 << 6),
	RACE_FLAG_FIRE		= (1 << 7),
	RACE_FLAG_ICE		= (1 << 8),
	RACE_FLAG_DESERT	= (1 << 9),
	RACE_FLAG_TREE		= (1 << 10),
	RACE_FLAG_ATT_ELEC	= (1 << 11),
	RACE_FLAG_ATT_FIRE	= (1 << 12),
	RACE_FLAG_ATT_ICE	= (1 << 13),
	RACE_FLAG_ATT_WIND	= (1 << 14),
	RACE_FLAG_ATT_EARTH	= (1 << 15),
	RACE_FLAG_ATT_DARK	= (1 << 16),
};

enum ELoads
{
	LOAD_NONE,
	LOAD_LIGHT,
	LOAD_NORMAL,
	LOAD_HEAVY,
	LOAD_MASSIVE
};

enum
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_HAIR,
#ifdef ENABLE_ACCE_COSTUME_SYSTEM
	PART_ACCE,
#endif
#ifdef ENABLE_AURA_SYSTEM
	PART_AURA,
#endif
#ifdef ENABLE_CROWN_SYSTEM
	PART_CROWN,
#endif
	PART_MAX_NUM,
	PART_WEAPON_SUB,
};

enum EChatType
{
	CHAT_TYPE_TALKING,
	CHAT_TYPE_INFO,
	CHAT_TYPE_NOTICE,
	CHAT_TYPE_PARTY,
	CHAT_TYPE_GUILD,
	CHAT_TYPE_COMMAND,
	CHAT_TYPE_SHOUT,
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
#ifdef ENABLE_DICE_SYSTEM
	CHAT_TYPE_DICE_INFO, //11
#endif
#ifdef ENABLE_ZODIAC_TEMPLE_CHAT
	CHAT_TYPE_ZODIAC_NOTICE,
	CHAT_TYPE_ZODIAC_SUB_NOTICE,
	CHAT_TYPE_ZODIAC_NOTICE_CLEAR,
#endif
#ifdef ENABLE_DUNGEON_MODULES
	CHAT_TYPE_MISSION,
#endif
	CHAT_TYPE_MAX_NUM
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL		= 0,
	WHISPER_TYPE_NOT_EXIST		= 1,
	WHISPER_TYPE_TARGET_BLOCKED	= 2,
	WHISPER_TYPE_SENDER_BLOCKED	= 3,
	WHISPER_TYPE_ERROR		= 4,
	WHISPER_TYPE_GM			= 5,
	WHISPER_TYPE_SYSTEM		= 0xFF
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
	POSITION_INTRO,
	POSITION_MAX_NUM
};

enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR,
	GM_DISABLE,
};

enum EMobRank
{
	MOB_RANK_PAWN,
	MOB_RANK_S_PAWN,
	MOB_RANK_KNIGHT,
	MOB_RANK_S_KNIGHT,
	MOB_RANK_BOSS,
	MOB_RANK_KING,
	MOB_RANK_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO
};

enum EBattleType
{
	BATTLE_TYPE_MELEE,
	BATTLE_TYPE_RANGE,
	BATTLE_TYPE_MAGIC,
	BATTLE_TYPE_SPECIAL,
	BATTLE_TYPE_POWER,
	BATTLE_TYPE_TANKER,
	BATTLE_TYPE_SUPER_POWER,
	BATTLE_TYPE_SUPER_TANKER,
	BATTLE_TYPE_MAX_NUM
};

enum EApplyTypes
{
	APPLY_NONE						= 0,
	APPLY_MAX_HP					= 1,
	APPLY_MAX_SP					= 2,
	APPLY_CON						= 3,
	APPLY_INT						= 4,
	APPLY_STR						= 5,
	APPLY_DEX						= 6,
	APPLY_ATT_SPEED					= 7,
	APPLY_MOV_SPEED					= 8,
	APPLY_CAST_SPEED				= 9,
	APPLY_HP_REGEN					= 10,
	APPLY_SP_REGEN					= 11,
	APPLY_POISON_PCT				= 12,
	APPLY_STUN_PCT					= 13,
	APPLY_SLOW_PCT					= 14,
	APPLY_CRITICAL_PCT				= 15,
	APPLY_PENETRATE_PCT				= 16,
	APPLY_ATTBONUS_HUMAN			= 17,
	APPLY_ATTBONUS_ANIMAL			= 18,
	APPLY_ATTBONUS_ORC				= 19,
	APPLY_ATTBONUS_MILGYO			= 20,
	APPLY_ATTBONUS_UNDEAD			= 21,
	APPLY_ATTBONUS_DEVIL			= 22,
	APPLY_STEAL_HP					= 23,
	APPLY_STEAL_SP					= 24,
	APPLY_MANA_BURN_PCT				= 25,
	APPLY_DAMAGE_SP_RECOVER			= 26,
	APPLY_BLOCK						= 27,
	APPLY_DODGE						= 28,
	APPLY_RESIST_SWORD				= 29,
	APPLY_RESIST_TWOHAND			= 30,
	APPLY_RESIST_DAGGER				= 31,
	APPLY_RESIST_BELL				= 32,
	APPLY_RESIST_FAN				= 33,
	APPLY_RESIST_BOW				= 34,
	APPLY_RESIST_FIRE				= 35,
	APPLY_RESIST_ELEC				= 36,
	APPLY_RESIST_MAGIC				= 37,
	APPLY_RESIST_WIND				= 38,
	APPLY_REFLECT_MELEE				= 39,
	APPLY_REFLECT_CURSE				= 40,
	APPLY_POISON_REDUCE				= 41,
	APPLY_KILL_SP_RECOVER			= 42,
	APPLY_EXP_DOUBLE_BONUS			= 43,
	APPLY_GOLD_DOUBLE_BONUS			= 44,
	APPLY_ITEM_DROP_BONUS			= 45,
	APPLY_POTION_BONUS				= 46,
	APPLY_KILL_HP_RECOVER			= 47,
	APPLY_IMMUNE_STUN				= 48,
	APPLY_IMMUNE_SLOW				= 49,
	APPLY_IMMUNE_FALL				= 50,
	APPLY_SKILL						= 51,
	APPLY_BOW_DISTANCE				= 52,
	APPLY_ATT_GRADE_BONUS			= 53,
	APPLY_DEF_GRADE_BONUS			= 54,
	APPLY_MAGIC_ATT_GRADE			= 55,
	APPLY_MAGIC_DEF_GRADE			= 56,
	APPLY_CURSE_PCT					= 57,
	APPLY_MAX_STAMINA				= 58,
	APPLY_ATTBONUS_WARRIOR			= 59,
	APPLY_ATTBONUS_ASSASSIN			= 60,
	APPLY_ATTBONUS_SURA				= 61,
	APPLY_ATTBONUS_SHAMAN			= 62,
	APPLY_ATTBONUS_MONSTER			= 63,
	APPLY_MALL_ATTBONUS				= 64,
	APPLY_MALL_DEFBONUS				= 65,
	APPLY_MALL_EXPBONUS				= 66,
	APPLY_MALL_ITEMBONUS			= 67,
	APPLY_MALL_GOLDBONUS			= 68,
	APPLY_MAX_HP_PCT				= 69,
	APPLY_MAX_SP_PCT				= 70,
	APPLY_SKILL_DAMAGE_BONUS		= 71,
	APPLY_NORMAL_HIT_DAMAGE_BONUS	= 72,
	APPLY_SKILL_DEFEND_BONUS		= 73,
	APPLY_NORMAL_HIT_DEFEND_BONUS	= 74,
	APPLY_EXTRACT_HP_PCT			= 75,
	APPLY_RESIST_WARRIOR			= 76,
	APPLY_RESIST_ASSASSIN			= 77,
	APPLY_RESIST_SURA				= 78,
	APPLY_RESIST_SHAMAN				= 79,
	APPLY_ENERGY					= 80,
	APPLY_DEF_GRADE					= 81,
	APPLY_COSTUME_ATTR_BONUS		= 82,
	APPLY_MAGIC_ATTBONUS_PER		= 83,
	APPLY_MELEE_MAGIC_ATTBONUS_PER	= 84,
	APPLY_RESIST_ICE				= 85,
	APPLY_RESIST_EARTH				= 86,
	APPLY_RESIST_DARK				= 87,
	APPLY_ANTI_CRITICAL_PCT			= 88,
	APPLY_ANTI_PENETRATE_PCT		= 89,
#ifdef ENABLE_WOLFMAN_CHARACTER
	APPLY_BLEEDING_REDUCE			= 90,
	APPLY_BLEEDING_PCT				= 91,
	APPLY_ATTBONUS_WOLFMAN			= 92,
	APPLY_RESIST_WOLFMAN			= 93,
	APPLY_RESIST_CLAW				= 94,
#endif
#ifdef ENABLE_ACCE_COSTUME_SYSTEM
	APPLY_ACCEDRAIN_RATE			= 95,
#endif
#ifdef ENABLE_MAGIC_REDUCTION_SYSTEM
	APPLY_RESIST_MAGIC_REDUCTION	= 96,
#endif
#ifdef ENABLE_EXTRA_APPLY_BONUS
	APPLY_ATTBONUS_STONE			= 97,
	APPLY_ATTBONUS_BOSS				= 98,
	APPLY_ATTBONUS_PVM_STR			= 99,//++
	APPLY_ATTBONUS_PVM_AVG			= 100,//
	APPLY_ATTBONUS_PVM_BERSERKER	= 101,//++
	APPLY_ATTBONUS_ELEMENT			= 102,//++
	APPLY_DEFBONUS_PVM				= 103,//++
	APPLY_DEFBONUS_ELEMENT			= 104,//++
	APPLY_ATTBONUS_PVP				= 105,//++
	APPLY_DEFBONUS_PVP				= 106,//++

	APPLY_ATTBONUS_FIRE				= 107,//++
	APPLY_ATTBONUS_ICE				= 108,//++
	APPLY_ATTBONUS_WIND				= 109,//++
	APPLY_ATTBONUS_EARTH			= 110,//++
	APPLY_ATTBONUS_DARK				= 111,//++
	APPLY_ATTBONUS_ELEC				= 112,//++
#endif
	MAX_APPLY_NUM
};

enum EOnClickEvents
{
	ON_CLICK_NONE,
	ON_CLICK_SHOP,
	ON_CLICK_TALK,
	ON_CLICK_MAX_NUM
};

enum EOnIdleEvents
{
	ON_IDLE_NONE,
	ON_IDLE_GENERAL,
	ON_IDLE_MAX_NUM
};

enum EWindows
{
	RESERVED_WINDOW,
	INVENTORY,
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
#ifdef ENABLE_SPECIAL_STORAGE
	UPGRADE_INVENTORY,
	BOOK_INVENTORY,
	STONE_INVENTORY,
	CHEST_INVENTORY,
#endif
#ifdef ENABLE_SWITCHBOT
	SWITCHBOT,
#endif
#ifdef ENABLE_6TH_7TH_ATTR
	ATTR_INVENTORY,
#endif
	BELT_INVENTORY,
#ifdef ENABLE_BUFFI_SYSTEM
	BUFFI_INVENTORY,
#endif
	GROUND,
#ifdef ENABLE_OFFLINE_SHOP
	NEW_OFFSHOP,
	SHOP_SAFEBOX,
#endif
	WINDOW_TYPE_MAX,
};

enum EMobSizes
{
	MOBSIZE_RESERVED,
	MOBSIZE_SMALL,
	MOBSIZE_MEDIUM,
	MOBSIZE_BIG
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE	= (1 << 0),
	AIFLAG_NOMOVE	= (1 << 1),
	AIFLAG_COWARD	= (1 << 2),
	AIFLAG_NOATTACKSHINSU	= (1 << 3),
	AIFLAG_NOATTACKJINNO	= (1 << 4),
	AIFLAG_NOATTACKCHUNJO	= (1 << 5),
	AIFLAG_ATTACKMOB = (1 << 6 ),
	AIFLAG_BERSERK	= (1 << 7),
	AIFLAG_STONESKIN	= (1 << 8),
	AIFLAG_GODSPEED	= (1 << 9),
	AIFLAG_DEATHBLOW	= (1 << 10),
	AIFLAG_REVIVE		= (1 << 11),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER,
	MOB_STATTYPE_TANKER,
	MOB_STATTYPE_SUPER_POWER,
	MOB_STATTYPE_SUPER_TANKER,
	MOB_STATTYPE_RANGE,
	MOB_STATTYPE_MAGIC,
	MOB_STATTYPE_MAX_NUM
};

enum EImmuneFlags
{
	IMMUNE_STUN		= (1 << 0),
	IMMUNE_SLOW		= (1 << 1),
	IMMUNE_FALL		= (1 << 2),
	IMMUNE_CURSE	= (1 << 3),
	IMMUNE_POISON	= (1 << 4),
	IMMUNE_TERROR	= (1 << 5),
	IMMUNE_REFLECT	= (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE,
	MOB_ENCHANT_SLOW,
	MOB_ENCHANT_POISON,
	MOB_ENCHANT_STUN,
	MOB_ENCHANT_CRITICAL,
	MOB_ENCHANT_PENETRATE,
#if defined(ENABLE_WOLFMAN_CHARACTER) && !defined(USE_MOB_BLEEDING_AS_POISON)
	MOB_ENCHANT_BLEEDING,
#endif
	MOB_ENCHANTS_MAX_NUM
};

enum EMobResists
{
	MOB_RESIST_SWORD,
	MOB_RESIST_TWOHAND,
	MOB_RESIST_DAGGER,
	MOB_RESIST_BELL,
	MOB_RESIST_FAN,
	MOB_RESIST_BOW,
	MOB_RESIST_FIRE,
	MOB_RESIST_ELECT,
	MOB_RESIST_MAGIC,
	MOB_RESIST_WIND,
	MOB_RESIST_POISON,
#if defined(ENABLE_WOLFMAN_CHARACTER) && !defined(USE_MOB_CLAW_AS_DAGGER)
	MOB_RESIST_CLAW,
#endif
#if defined(ENABLE_WOLFMAN_CHARACTER) && !defined(USE_MOB_BLEEDING_AS_POISON)
	MOB_RESIST_BLEEDING,
#endif
	MOB_RESISTS_MAX_NUM
};

enum skillAttrTypes
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE,
	SKILL_ATTR_TYPE_RANGE,
	SKILL_ATTR_TYPE_MAGIC
};

enum skillLevels
{
	SKILL_NORMAL,
	SKILL_MASTER,
	SKILL_GRAND_MASTER,
	SKILL_PERFECT_MASTER,
#ifdef ENABLE_SKILLS_LEVEL_OVER_P
	SKILL_SAGE_MASTER,
	SKILL_LEGENDARY_MASTER,
#endif
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_RESERVE,
	GUILD_WAR_DURATION = 30*60,
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12*60*60,
};

enum EAttributeSet
{
	ATTRIBUTE_SET_WEAPON,
	ATTRIBUTE_SET_BODY,
	ATTRIBUTE_SET_WRIST,
	ATTRIBUTE_SET_FOOTS,
	ATTRIBUTE_SET_NECK,
	ATTRIBUTE_SET_HEAD,
	ATTRIBUTE_SET_SHIELD,
	ATTRIBUTE_SET_EAR,
#ifdef ENABLE_ITEM_ATTR_COSTUME
	ATTRIBUTE_SET_COSTUME_BODY,
	ATTRIBUTE_SET_COSTUME_HAIR,
#if defined(ENABLE_ITEM_ATTR_COSTUME) && defined(ENABLE_WEAPON_COSTUME_SYSTEM)
	ATTRIBUTE_SET_COSTUME_WEAPON,
#endif
#endif
	ATTRIBUTE_SET_MAX_NUM
};

#ifdef ENABLE_ATTR_RARE_RENEWAL
enum EAttributeRareSet
{
#if defined (ENABLE_PET_SKIN_ATTR)
	ATTRIBUTE_SET_RARE_SKIN,
#endif
#if defined (ENABLE_HERSEYE_ATTIR)
	// Equipments
	ATTRIBUTE_SET_RARE_GLOVE,
	ATTRIBUTE_SET_RARE_PENDANT,
	ATTRIBUTE_SET_RARE_CROWN,
	ATTRIBUTE_SET_RARE_BELT,

	// Costumes
	ATTRIBUTE_SET_RARE_COSTUME, // 

	// Others
	ATTRIBUTE_SET_RARE_DREAMSOUL,
	ATTRIBUTE_SET_RARE_BOOSTERS,
	ATTRIBUTE_SET_RARE_RINGS,
	ATTRIBUTE_SET_RARE_SHININGS,

	// Pet Mount
	ATTRIBUTE_SET_RARE_PET_AND_MOUNT, // 
#endif
	ATTRIBUTE_SET_RARE_MAX_NUM,

	ATTRIBUTE_RARE_VALUE_NUM = 5,
};
#endif

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	MAX_PRIV_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,
	PREMIUM_ITEM,
	PREMIUM_SAFEBOX,
	PREMIUM_AUTOLOOT,
	PREMIUM_FISH_MIND,
	PREMIUM_MARRIAGE_FAST,
	PREMIUM_GOLD,
	PREMIUM_MAX_NUM = 9
};

enum SPECIAL_EFFECT
{
	SE_NONE,
	SE_HPUP_RED,
	SE_SPUP_BLUE,
	SE_SPEEDUP_GREEN,
	SE_DXUP_PURPLE,
	SE_CRITICAL,
	SE_PENETRATE,
	SE_BLOCK,
	SE_DODGE,
	SE_CHINA_FIREWORK,
	SE_SPIN_TOP,
	SE_SUCCESS,
	SE_FAIL,
	SE_FR_SUCCESS,
	SE_LEVELUP_ON_14_FOR_GERMANY,
	SE_LEVELUP_UNDER_15_FOR_GERMANY,
	SE_PERCENT_DAMAGE1,
	SE_PERCENT_DAMAGE2,
	SE_PERCENT_DAMAGE3,
	SE_AUTO_HPUP,
	SE_AUTO_SPUP,
	SE_EQUIP_RAMADAN_RING,
	SE_EQUIP_HALLOWEEN_CANDY,
	SE_EQUIP_HAPPINESS_RING,
	SE_EQUIP_LOVE_PENDANT,
#ifdef ENABLE_ACCE_COSTUME_SYSTEM
	SE_EFFECT_ACCE_SUCCEDED,
	SE_EFFECT_ACCE_EQUIP,
#endif
#ifdef ENABLE_EXTENDED_BATTLE_PASS
	SE_EFFECT_BP_NORMAL_MISSION_COMPLETED,
	SE_EFFECT_BP_PREMIUM_MISSION_COMPLETED,
	SE_EFFECT_BP_EVENT_MISSION_COMPLETED,
	SE_EFFECT_BP_NORMAL_BATTLEPASS_COMPLETED,
	SE_EFFECT_BP_PREMIUM_BATTLEPASS_COMPLETED,
	SE_EFFECT_BP_EVENT_BATTLEPASS_COMPLETED,
#endif
};

#include "item_length.h"
enum EDragonSoulRefineWindowSize
{
	DRAGON_SOUL_REFINE_GRID_MAX = 15,
};

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),

	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,

	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
};

#pragma pack(push, 1)

typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
	SItemPos ()
	{
		window_type = INVENTORY;
		cell = WORD_MAX;
	}

	SItemPos (BYTE _window_type, WORD _cell)
	{
		window_type = _window_type;
		cell = _cell;
	}

	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
		case RESERVED_WINDOW:
			return false;
		case INVENTORY:
		case EQUIPMENT:
		case BELT_INVENTORY:
			return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
		case DRAGON_SOUL_INVENTORY:
			return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);
#ifdef ENABLE_SPECIAL_STORAGE
		case UPGRADE_INVENTORY:
		case BOOK_INVENTORY:
		case STONE_INVENTORY:
		case CHEST_INVENTORY:
			return cell < (SPECIAL_INVENTORY_MAX_NUM);
#endif
#ifdef ENABLE_SWITCHBOT
		case SWITCHBOT:
			return cell < SWITCHBOT_SLOT_COUNT;
#endif
#ifdef ENABLE_6TH_7TH_ATTR
		case ATTR_INVENTORY:
			return cell < 1;
#endif
#ifdef ENABLE_BUFFI_SYSTEM
		case BUFFI_INVENTORY:
			return cell < BUFFI_MAX_SLOT;
#endif
		case SAFEBOX:
		case MALL:
			return false;
		default:
			return false;
		}
		return false;
	}

	bool IsEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= INVENTORY_MAX_NUM && cell < INVENTORY_MAX_NUM + WEAR_MAX_NUM)
			|| IsDragonSoulEquipPosition();
	}

	bool IsDragonSoulEquipPosition() const
	{
		return (window_type == INVENTORY) && (DRAGON_SOUL_EQUIP_SLOT_START <= cell) && (DRAGON_SOUL_EQUIP_SLOT_END > cell); // @fixme184
	}

#ifdef ENABLE_SWITCHBOT
	bool IsSwitchbotPosition() const
	{
		return SWITCHBOT == window_type && cell < SWITCHBOT_SLOT_COUNT;
	}
#endif

	bool IsBeltInventoryPosition() const
	{
		return (BELT_INVENTORY_SLOT_START <= cell) && (BELT_INVENTORY_SLOT_END > cell);
	}

	bool IsDefaultInventoryPosition() const
	{
		return INVENTORY == window_type && cell < INVENTORY_MAX_NUM;
	}

	bool operator==(const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}
	bool operator<(const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}

#ifdef ENABLE_BUFFI_SYSTEM
	bool IsBuffiEquipPosition() const
	{
		return BUFFI_INVENTORY == window_type && cell < (BUFFI_MAX_SLOT);
	}
#endif
} TItemPos;

const TItemPos NPOS (RESERVED_WINDOW, WORD_MAX);

typedef struct SItemPosEx
{
	TItemPos pos;
	int id{ 0 };
} TItemPosEx;

typedef enum
{
	SHOP_COIN_TYPE_GOLD, // DEFAULT VALUE
	SHOP_COIN_TYPE_SECONDARY_COIN,
} EShopCoinType;

#ifdef ENABLE_SKILL_COLOR_SYSTEM
namespace ESkillColorLength
{
	enum ESkillColorLength
	{
		MAX_SKILL_COUNT = 6,
		MAX_EFFECT_COUNT = 5,
		MAX_BUFF_COUNT = 5,
		BUFF_BEGIN = MAX_SKILL_COUNT,
	};
}
#endif

#ifdef ENABLE_MINING_RENEWAL

enum miningConfig
{
	MINING_UPGRADE_ITEM_VNUM = 200211,
	MINING_UPGRADE_BOOK_VNUM = 24011,

	MINING_UPGRADE_BOOK_DROP_PCT = 4,

	MINING_EVENT_ADD_POINTS = 0,
	MINING_EVENT_REQUEST_POINTS,
	MINING_EVENT_CANCEL
};

#endif

#ifdef ENABLE_MULTI_LANGUAGE_SYSTEM
enum EMultiLocale
{
	MAX_QUEST_NOTICE_ARGS = 5
};

enum ELocale
{
	LOCALE_YMIR, // Korea
	LOCALE_EN, // United Kingdom
	LOCALE_PT, // Portugal
	LOCALE_ES, // Spain
	LOCALE_FR, // France
	LOCALE_DE, // Germany
	LOCALE_RO, // Romania
	LOCALE_PL, // Poland
	LOCALE_IT, // Italy
	LOCALE_CZ, // Czech
	LOCALE_HU, // Hungary
	LOCALE_TR, // Turkey
	LOCALE_MAX_NUM,
	LOCALE_DEFAULT = LOCALE_EN,
};
#endif


#ifdef ENABLE_EXTENDED_BATTLE_PASS
enum EExtBattlePassInfo
{
	BATTLE_PASS_ITEM = 93100,
};

enum EExtBattlePassType
{
	BATTLEPASS_NORMAL,
	BATTLEPASS_PREMIUM,
	BATTLEPASS_EVENT,

	BATTLEPASS_TYPE_MAX,
};

enum EExtBattleMissionPassType
{
	MISSION_TYPE_NONE,

	KILL_MONSTER,
	KILL_PLAYER,

	DAMAGE_MONSTER,
	DAMAGE_PLAYER,

	BP_ITEM_USE,
	BP_ITEM_SELL,
	BP_ITEM_CRAFT,

	BP_ITEM_REFINE,
	BP_ITEM_DESTROY,
	BP_ITEM_COLLECT,

	FISH_FISHING,
	FISH_GRILL,
	FISH_CATCH,

	EXP_COLLECT,
	YANG_COLLECT,

	GUILD_PLAY_GUILDWAR,
	GUILD_SPENT_EXP,

	COMPLETE_DUNGEON,

	CHAT_SHOUT,

	BP_MINING,

	DAMAGE_METIN,
	DAMAGE_METIN_REACH,

	BP_REFINE_DS,
	BP_REFINE_SASH,

	MISSION_TYPE_MAX,
};
#endif

#ifdef ENABLE_6TH_7TH_ATTR
enum EAttribute67ThSet
{
	ATTRIBUTE_67TH_WEAPON,
	ATTRIBUTE_67TH_BODY,
	ATTRIBUTE_67TH_WRIST,
	ATTRIBUTE_67TH_FOOTS,
	ATTRIBUTE_67TH_NECK,
	ATTRIBUTE_67TH_HEAD,
	ATTRIBUTE_67TH_SHIELD,
	ATTRIBUTE_67TH_EAR,
	ATTRIBUTE_67TH_PENDANT,
	ATTRIBUTE_67TH_GLOVE,
	ATTRIBUTE_67TH_MAX,
};

typedef struct S67AttrTable
{
	BYTE attrType;
	WORD attrValue[5];
}T67AttrTable;

#endif

#ifdef ENABLE_MINI_GAME_OKEY_NORMAL
enum EMonsterOkeyCardEvent
{
	RUMI_PLAY_YANG = 500000,
	RUMI_PLAY_ITEM = 79506,

	RUMI_REWARD_L = 50267,
	RUMI_REWARD_M = 50268,
	RUMI_REWARD_S = 50269,

	HAND_CARD_INDEX_MAX = 5,
	FIELD_CARD_INDEX_MAX = 3,
	FIELD_CARD_SLOT_MAX = 5,

	CARD_COLOR_MAX = 3,
	CARD_NUMBER_END = 8,
	DECK_COUNT_MAX = CARD_COLOR_MAX * CARD_NUMBER_END,

	LOW_TOTAL_SCORE = 300,
	MID_TOTAL_SCORE = 400,
};
#endif	// ENABLE_MINI_GAME_OKEY_NORMAL

#ifdef ENABLE_MINI_GAME_CATCH_KING
enum EMonsterCatchKingEvent
{
	CATCH_KING_DROP_ITEM = 79603,

	CATCH_KING_REWARD_S = 50930,
	CATCH_KING_REWARD_M = 50929,
	CATCH_KING_REWARD_L = 50928,

	CATCH_KING_PLAY_YANG = 30000,
	CATCH_KING_PLAY_ITEM = 79604,
};
#endif	// ENABLE_MINI_GAME_CATCH_KING

#pragma pack(pop)

#endif

